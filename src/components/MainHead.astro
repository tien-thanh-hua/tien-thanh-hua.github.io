---
import '../styles/global.css';
import '../styles/material-theme/theme.css';
import '../styles/material-theme/theme.dark.css';
import '../styles/material-theme/theme.light.css';
import '../styles/material-theme/tokens.css';
import '../styles/material-theme/colors.module.css';
import GoogleTagManager from './GoogleTagManager.astro';
import MicrosoftClarity from './MicrosoftClarity.astro';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
}

const {
	title = "Tien-Thanh Hua | Full-Stack Developer",
	description = 'Creative developer with a passion for crafting beautiful websites.',
} = Astro.props;
---

<meta charset="UTF-8" />
<meta name="description" property="og:description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<title>{title}</title>

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Manrope:wght@500..800">

<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

	if (typeof localStorage !== 'undefined') {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>

<MicrosoftClarity />
<GoogleTagManager />